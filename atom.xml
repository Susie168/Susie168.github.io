<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Susie个人博客</title>
  <icon>https://www.gravatar.com/avatar/a3614ff25efad0fa2a54cb38a27ffcf5</icon>
  <subtitle>人生如逆水行舟  不进则退</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-21T06:33:37.521Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Susie</name>
    <email>2858345415@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tsNote</title>
    <link href="http://yoursite.com/2019/02/21/tsNote/"/>
    <id>http://yoursite.com/2019/02/21/tsNote/</id>
    <published>2019-02-21T03:45:06.000Z</published>
    <updated>2019-02-21T06:33:37.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TypeScript的小demo"><a href="#TypeScript的小demo" class="headerlink" title="TypeScript的小demo"></a>TypeScript的小demo</h3><h4 id="Typescript的初步印象"><a href="#Typescript的初步印象" class="headerlink" title="Typescript的初步印象"></a>Typescript的初步印象</h4><p>第一印象：1.是JavaScript的一个超集; 2.很出名<br>第二印象：   </p><ol><li>typescript是开源的，typescript编译工具可以运行再任何服务器和任何系统上;    </li><li>typescript可以编译成纯JavaScript  </li><li>可以在编译阶段就可以发现很多错误   </li><li>(后续等我复习完官网再详细总结一下^_^)    </li></ol><a id="more"></a><h4 id="TypeScript小demo"><a href="#TypeScript小demo" class="headerlink" title="TypeScript小demo"></a>TypeScript小demo</h4><ol><li>安装Typescript<br>创建一个文件专门放你的typescript文件, 进入目录d:/typescript/helloworld/  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure></li></ol><p>检查安装版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure></p><ol start="2"><li>开始玩个小demo   <blockquote><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>可以一路回车使用默认的配置，生成package.json配置文件</p><blockquote><p>安装webpack<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install –save-dev webpack webpack-dev-server  //web服务文件</span><br><span class="line">npm install –save-dev webpack-cli  //webpack V4+版本时需要安装这个</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p> 根目录新建webpack.config.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    // 入口文件</span><br><span class="line">    entry: &quot;./src/greeter.ts&quot;,</span><br><span class="line">    // 输出文件和目录</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &quot;bundle.js&quot;,</span><br><span class="line">        path: __dirname + &quot;/dist&quot;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 打开 sourcemaps 调试 webpack 的输出</span><br><span class="line">    devtool: &quot;source-map&quot;,</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [&quot;.ts&quot;, &quot;.tsx&quot;, &quot;.js&quot;, &quot;.json&quot;, &quot;.html&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            // &apos;.ts&apos; or &apos;.tsx&apos; 后缀的文件将被 loadr &apos;awesome-typescript-loader&apos; 处理。</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.tsx?$/,</span><br><span class="line">                loader: &quot;awesome-typescript-loader&quot;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // 所有输出的 &apos;.js&apos; 有 sourcemaps 的文件将被 &apos;source-map-loader&apos; 预处理。</span><br><span class="line">            &#123;</span><br><span class="line">                enforce: &quot;pre&quot;,</span><br><span class="line">                test: /\.js$/,</span><br><span class="line">                loader: &quot;source-map-loader&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>package.json配置中的script添加如下内容进行设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --client-log-level none --color --inline --hot&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  //配置中可以看到，这里执行npm run build就是使用webpack编译代码，执行npm run dev就是启动一个web服务。</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>安装TypeScript、awesome-typescript-loader和source-map-loader  </p></blockquote><pre><code>这些依赖会让 TypeScript 和 webpack 在一起良好地工作，awesome-typescript-loader 可以让 webpack 使用 TypeScript 的标准配置文件 tsconfig.json 编译 TypeScript 代码。source-map-loader 使用 TypeScript 输出的 sourcemap 文件来告诉 webpack 何时生成自己的 sourcemaps，这就允许你在调试最终生成的文件时就好像在调试 TypeScript 源码一样。</code></pre><blockquote><p>重新安装一次typescript<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置typescript：根文件创建tsconfig.json文件，添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;outDir&quot;: &quot;./dist/&quot;,</span><br><span class="line">        &quot;sourceMap&quot;: true,</span><br><span class="line">        &quot;noImplicitAny&quot;: true,</span><br><span class="line">        &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class="line">        &quot;target&quot;: &quot;es5&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;include&quot;: [</span><br><span class="line">        &quot;./src/**/*&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>创建index.html文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;My TypeScript&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 调用生成的 js 文件 --&gt;</span><br><span class="line">    &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>新建greeter.ts文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function greeter(person: string) &#123;</span><br><span class="line">    return &quot;Hello, &quot; + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let user = &quot;I am Susie&quot;;</span><br><span class="line"></span><br><span class="line">document.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>总结一下项目文件目录为：   </p></blockquote><p><img src="../../public/img/allTree.jpg" alt="Alt text"></p><blockquote><p>执行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;TypeScript的小demo&quot;&gt;&lt;a href=&quot;#TypeScript的小demo&quot; class=&quot;headerlink&quot; title=&quot;TypeScript的小demo&quot;&gt;&lt;/a&gt;TypeScript的小demo&lt;/h3&gt;&lt;h4 id=&quot;Typescript的初步印象&quot;&gt;&lt;a href=&quot;#Typescript的初步印象&quot; class=&quot;headerlink&quot; title=&quot;Typescript的初步印象&quot;&gt;&lt;/a&gt;Typescript的初步印象&lt;/h4&gt;&lt;p&gt;第一印象：1.是JavaScript的一个超集; 2.很出名&lt;br&gt;第二印象：   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;typescript是开源的，typescript编译工具可以运行再任何服务器和任何系统上;    &lt;/li&gt;
&lt;li&gt;typescript可以编译成纯JavaScript  &lt;/li&gt;
&lt;li&gt;可以在编译阶段就可以发现很多错误   &lt;/li&gt;
&lt;li&gt;(后续等我复习完官网再详细总结一下^_^)    &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的call、apply、bind方法</title>
    <link href="http://yoursite.com/2019/02/20/changeThis/"/>
    <id>http://yoursite.com/2019/02/20/changeThis/</id>
    <published>2019-02-20T10:49:08.000Z</published>
    <updated>2019-02-21T06:33:40.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="call、apply、bind的区别"><a href="#call、apply、bind的区别" class="headerlink" title="call、apply、bind的区别"></a>call、apply、bind的区别</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>语法：  </p><blockquote><p>call(thisObj,arg1,arg2…)   </p></blockquote><p>a.call(b,1,2);执行环境为b,a里的this指向b;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add(a,b)&#123;</span><br><span class="line">console.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">function sub(a,b)&#123;</span><br><span class="line">console.log(a - b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add.call(sub,2,3);  //5</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Class1()&#123;</span><br><span class="line">    this.name = function()&#123;</span><br><span class="line">    console.log(&quot;class1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function class2()&#123;</span><br><span class="line">    Class1.call(this);  //当前的this指向了class1</span><br><span class="line">&#125;</span><br><span class="line">var f = new class2();</span><br><span class="line">f.name();  //调用的是class1内的方法，将class1的name方法交给class2使用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function my()&#123;</span><br><span class="line">this.name = &quot;Susie&quot;;</span><br><span class="line">this.showName = function()&#123;</span><br><span class="line">console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function you()&#123;</span><br><span class="line">this.name = &quot;Gill&quot;;</span><br><span class="line">&#125;</span><br><span class="line">var girl = new my();</span><br><span class="line">var boy = new you();</span><br><span class="line">girl.showName();  //Susie</span><br><span class="line">//bug:若是没有实例化my()，my.showName()是错误的;</span><br><span class="line"></span><br><span class="line">girl.showName.call(boy);  //在you()的执行环境下,this.name是&quot;Gill&quot;</span><br></pre></td></tr></table></figure><blockquote><p>继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.sayWord = function()&#123;</span><br><span class="line">console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function Human()&#123;</span><br><span class="line">this.sayName = function()&#123;</span><br><span class="line">console.log(&quot;hello Human&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function Dog(name)&#123;</span><br><span class="line">Animal.call(this,name);</span><br><span class="line">Human.call(this);</span><br><span class="line">&#125;</span><br><span class="line">var dog = new Dog(&apos;I am a  dog&apos;);</span><br><span class="line">dog.sayName();  // hello Human</span><br><span class="line">dog.sayWord(); //I am a dog</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h5><p>语法：  </p><blockquote><p>apply(thisObj,argArr);<br>对于call、apply来说，二者的区别在于接受的参数不同，call需要把参数按顺序传递进去(用于明确知道数量时)，而 apply 则是把参数放在数组里(用于参数数量不确定时push进去)  </p></blockquote><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind也是可以改变函数体内的this指向, 类似于call(在IE6,7,8不支持)，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = function()&#123;</span><br><span class="line">    console.log(this.x);</span><br><span class="line">&#125;</span><br><span class="line">var foo =&#123;</span><br><span class="line">    x:3;</span><br><span class="line">&#125;</span><br><span class="line">bar() //undefined</span><br><span class="line">bar.bind(foo)(); //3   **(bar.bind(foo)绑定函数，根据传入的参数按照顺序来调用)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;call、apply、bind的区别&quot;&gt;&lt;a href=&quot;#call、apply、bind的区别&quot; class=&quot;headerlink&quot; title=&quot;call、apply、bind的区别&quot;&gt;&lt;/a&gt;call、apply、bind的区别&lt;/h3&gt;&lt;h4 id=&quot;call&quot;&gt;&lt;a href=&quot;#call&quot; class=&quot;headerlink&quot; title=&quot;call&quot;&gt;&lt;/a&gt;call&lt;/h4&gt;&lt;p&gt;语法：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;call(thisObj,arg1,arg2…)   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;a.call(b,1,2);执行环境为b,a里的this指向b;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function add(a,b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(a + b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function sub(a,b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(a - b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add.call(sub,2,3);  //5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 实现继承</title>
    <link href="http://yoursite.com/2019/02/12/resume/"/>
    <id>http://yoursite.com/2019/02/12/resume/</id>
    <published>2019-02-11T16:00:00.000Z</published>
    <updated>2019-02-21T06:33:36.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="继承实现的几种方式"><a href="#继承实现的几种方式" class="headerlink" title="继承实现的几种方式"></a>继承实现的几种方式</h3><ol><li>原型链继承方式<br>原理：每个对象都有一个prototype,返回对象类型原型的引用；<br>利弊：只能单继承，继承后会影响所有概念<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> function foo()&#123;</span><br><span class="line">   this.one = function()&#123;</span><br><span class="line">       console.log(&quot;我是1&quot;);     </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">function fn()&#123;</span><br><span class="line">this.two = function()&#123;</span><br><span class="line">       console.log(&quot;我是2&quot;);     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">//fn的原型为foo对象</span><br><span class="line">fn.prototype = new foo();</span><br><span class="line">var obj = new fn();</span><br><span class="line">obj.one();  //我是1</span><br><span class="line">obj.two();  //我是2</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>构造函数继承<br>原理: 定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this<br>利弊：简单明了；但无法继承原型链上的属性和方法；组合方式更好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function One(age)&#123;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">function Two(age)&#123;</span><br><span class="line">    One.call(this, age);   //对象冒充</span><br><span class="line">    //Box.apply(this, age); </span><br><span class="line">&#125;</span><br><span class="line">var three = new Two(22);  //22</span><br><span class="line">console.log(three.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//原型继承+构造继承是最好复用方式</span><br><span class="line">Two.prototype = new One();</span><br><span class="line">var four = new Two(23); //23</span><br></pre></td></tr></table></figure></li><li><p>复制继承<br>原理：extend复制方式<br>利弊：可多继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> function foo()&#123;</span><br><span class="line">   this.one = function()&#123;</span><br><span class="line">       console.log(&quot;我是1&quot;);     </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">function fn()&#123;</span><br><span class="line">this.two = function()&#123;</span><br><span class="line">       console.log(&quot;我是2&quot;);     </span><br><span class="line">   &#125;</span><br><span class="line"> this.extend = function(parent)&#123;</span><br><span class="line"> for(var key in parent)&#123;</span><br><span class="line"> this[key] = parent[key];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Three = new fn();</span><br><span class="line">Three.extend(new foo());</span><br><span class="line">Three.one();</span><br><span class="line">Three.two();</span><br></pre></td></tr></table></figure></li></ol><p><code>查找资料后看到了ES6标准类的继承，引入了class概念，等细学后再做个总结</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;继承实现的几种方式&quot;&gt;&lt;a href=&quot;#继承实现的几种方式&quot; class=&quot;headerlink&quot; title=&quot;继承实现的几种方式&quot;&gt;&lt;/a&gt;继承实现的几种方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;原型链继承方式&lt;br&gt;原理：每个对象都有一个prototype,返回对象类型原型的引用；&lt;br&gt;利弊：只能单继承，继承后会影响所有概念&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; function foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	  this.one = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	      console.log(&amp;quot;我是1&amp;quot;);   	  	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function fn()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.two = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	      console.log(&amp;quot;我是2&amp;quot;);   	  	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//fn的原型为foo对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn.prototype = new foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj = new fn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.one();  //我是1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.two();  //我是2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="http://yoursite.com/2019/01/23/index/"/>
    <id>http://yoursite.com/2019/01/23/index/</id>
    <published>2019-01-22T16:00:00.000Z</published>
    <updated>2019-01-31T03:55:32.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-GitHub-Git-Hexo"><a href="#Node-GitHub-Git-Hexo" class="headerlink" title="Node + GitHub + Git + Hexo"></a>Node + GitHub + Git + Hexo</h3><h5 id="Node-安装"><a href="#Node-安装" class="headerlink" title="Node 安装"></a>Node 安装</h5><blockquote><p>下载 + 安装 Node<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure></p></blockquote><p><code>&gt; 返回node版本为安装成功</code><br><a id="more"></a></p><h5 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git  安装"></a>Git  安装</h5><p>下载 + Git<br>可右键鼠标来检查是否安装了Git</p><h4 id="GitHub-注册"><a href="#GitHub-注册" class="headerlink" title="GitHub 注册"></a>GitHub 注册</h4><ul><li>注册账号</li><li>创建仓库<ul><li>点击右上角的new  repository</li><li>Repository name为个人GitHub名+.github.io</li></ul></li><li>开启GitHub pages <ul><li>settings + choose a theme    </li></ul></li></ul><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p>Hexo 目录下右键选择Git Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ npm init </span><br><span class="line">$ npm install</span><br><span class="line">$ npm g </span><br><span class="line">$ npm s <span class="comment"># 启动本地服务器</span></span><br></pre></td></tr></table></figure></p><p>根目录的_config.yml文件, Hexo deploy 部署到GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Susie168/Susie168.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><p>Git Bash</p><ul><li><p>SSH keys 设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">mkdir key_backup</span><br><span class="line">cp id_rsa* key_backup</span><br><span class="line">rm id_rsa</span><br><span class="line">#以上三步为备份和移除原来的ssh key 设置</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot; #新的key文件</span><br></pre></td></tr></table></figure></li><li><p>SSH Key 添加到GitHub</p><ul><li>首页 右上角setting</li><li>SSH and GPG keys选项下添加你的key(C:\Users\用户名.ssh\id_rsa.pub文件以文本打开全部复制即可)</li></ul></li></ul><h4 id="根目录-config-yml-修改个人配置即可"><a href="#根目录-config-yml-修改个人配置即可" class="headerlink" title="根目录_config.yml 修改个人配置即可"></a>根目录_config.yml 修改个人配置即可</h4><h3 id="遇坑"><a href="#遇坑" class="headerlink" title="遇坑"></a>遇坑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo -d  #提交的是public文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;title&quot;  #source/_post创建了title.md文件，Markdom语法写好文档</span><br><span class="line">$ hexo g  &amp;&amp; hexo d  # 提交更改的.md 文件</span><br></pre></td></tr></table></figure><p><code>其实搭建Hexo博客网上都很多，我除了自己记录一下学习过程，也是为了营造美好开始的假象[捂脸]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Node-GitHub-Git-Hexo&quot;&gt;&lt;a href=&quot;#Node-GitHub-Git-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Node + GitHub + Git + Hexo&quot;&gt;&lt;/a&gt;Node + GitHub + Git + Hexo&lt;/h3&gt;&lt;h5 id=&quot;Node-安装&quot;&gt;&lt;a href=&quot;#Node-安装&quot; class=&quot;headerlink&quot; title=&quot;Node 安装&quot;&gt;&lt;/a&gt;Node 安装&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;下载 + 安装 Node&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;gt; 返回node版本为安装成功&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="gitHub" scheme="http://yoursite.com/tags/gitHub/"/>
    
  </entry>
  
  <entry>
    <title>js笔记</title>
    <link href="http://yoursite.com/2019/01/23/my-article/"/>
    <id>http://yoursite.com/2019/01/23/my-article/</id>
    <published>2019-01-22T16:00:00.000Z</published>
    <updated>2019-02-21T06:33:38.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js实现保留两位小数"><a href="#js实现保留两位小数" class="headerlink" title="js实现保留两位小数"></a>js实现保留两位小数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> returnFloat(value) &#123;</span><br><span class="line">var value = Math.round(parseFloat(value) * 100) / 100;</span><br><span class="line">var xsb = value.toString().split(<span class="string">"."</span>);</span><br><span class="line"><span class="keyword">if</span> (xsb.length == 1) &#123;</span><br><span class="line">value = value.toString() + <span class="string">".00"</span>;</span><br><span class="line"><span class="built_in">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (value.length &gt; 1) &#123;</span><br><span class="line"><span class="keyword">if</span> (xsb[1].length &lt; 2) &#123;</span><br><span class="line">value = value.toString() + <span class="string">"0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js实现保留两位小数&quot;&gt;&lt;a href=&quot;#js实现保留两位小数&quot; class=&quot;headerlink&quot; title=&quot;js实现保留两位小数&quot;&gt;&lt;/a&gt;js实现保留两位小数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>

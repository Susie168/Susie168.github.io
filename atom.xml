<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Susie个人博客</title>
  <icon>https://www.gravatar.com/avatar/a3614ff25efad0fa2a54cb38a27ffcf5</icon>
  <subtitle>人生如逆水行舟  不进则退</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-20T07:16:13.674Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Susie</name>
    <email>2858345415@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 实现继承</title>
    <link href="http://yoursite.com/2019/02/12/resume/"/>
    <id>http://yoursite.com/2019/02/12/resume/</id>
    <published>2019-02-11T16:00:00.000Z</published>
    <updated>2019-02-20T07:16:13.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="继承实现的几种方式"><a href="#继承实现的几种方式" class="headerlink" title="继承实现的几种方式"></a>继承实现的几种方式</h3><ol><li>原型链继承方式<br>原理：每个对象都有一个prototype,返回对象类型原型的引用；<br>利弊：只能单继承，继承后会影响所有概念<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> function foo()&#123;</span><br><span class="line">   this.one = function()&#123;</span><br><span class="line">       console.log(&quot;我是1&quot;);     </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">function fn()&#123;</span><br><span class="line">this.two = function()&#123;</span><br><span class="line">       console.log(&quot;我是2&quot;);     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">//fn的原型为foo对象</span><br><span class="line">fn.prototype = new foo();</span><br><span class="line">var obj = new fn();</span><br><span class="line">obj.one();  //我是1</span><br><span class="line">obj.two();  //我是2</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>构造函数继承<br>原理: 定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this<br>利弊：简单明了；但无法继承原型链上的属性和方法；组合方式更好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function One(age)&#123;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">function Two(age)&#123;</span><br><span class="line">    One.call(this, age);   //对象冒充</span><br><span class="line">    //Box.apply(this, age); </span><br><span class="line">&#125;</span><br><span class="line">var three = new Two(22);  //22</span><br><span class="line">console.log(three.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//原型继承+构造继承是最好复用方式</span><br><span class="line">Two.prototype = new One();</span><br><span class="line">var four = new Two(23); //23</span><br></pre></td></tr></table></figure></li><li><p>复制继承<br>原理：extend复制方式<br>利弊：可多继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> function foo()&#123;</span><br><span class="line">   this.one = function()&#123;</span><br><span class="line">       console.log(&quot;我是1&quot;);     </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">function fn()&#123;</span><br><span class="line">this.two = function()&#123;</span><br><span class="line">       console.log(&quot;我是2&quot;);     </span><br><span class="line">   &#125;</span><br><span class="line"> this.extend = function(parent)&#123;</span><br><span class="line"> for(var key in parent)&#123;</span><br><span class="line"> this[key] = parent[key];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Three = new fn();</span><br><span class="line">Three.extend(new foo());</span><br><span class="line">Three.one();</span><br><span class="line">Three.two();</span><br></pre></td></tr></table></figure></li></ol><p><code>查找资料后看到了ES6标准类的继承，引入了class概念，等细学后再做个总结</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;继承实现的几种方式&quot;&gt;&lt;a href=&quot;#继承实现的几种方式&quot; class=&quot;headerlink&quot; title=&quot;继承实现的几种方式&quot;&gt;&lt;/a&gt;继承实现的几种方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;原型链继承方式&lt;br&gt;原理：每个对象都有一个prototype,返回对象类型原型的引用；&lt;br&gt;利弊：只能单继承，继承后会影响所有概念&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; function foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	  this.one = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	      console.log(&amp;quot;我是1&amp;quot;);   	  	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function fn()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.two = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	      console.log(&amp;quot;我是2&amp;quot;);   	  	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//fn的原型为foo对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn.prototype = new foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj = new fn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.one();  //我是1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.two();  //我是2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js笔记</title>
    <link href="http://yoursite.com/2019/01/23/my-article/"/>
    <id>http://yoursite.com/2019/01/23/my-article/</id>
    <published>2019-01-22T16:00:00.000Z</published>
    <updated>2019-02-20T09:25:55.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js实现保留两位小数"><a href="#js实现保留两位小数" class="headerlink" title="js实现保留两位小数"></a>js实现保留两位小数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> returnFloat(value) &#123;</span><br><span class="line">var value = Math.round(parseFloat(value) * 100) / 100;</span><br><span class="line">var xsb = value.toString().split(<span class="string">"."</span>);</span><br><span class="line"><span class="keyword">if</span> (xsb.length == 1) &#123;</span><br><span class="line">value = value.toString() + <span class="string">".00"</span>;</span><br><span class="line"><span class="built_in">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (value.length &gt; 1) &#123;</span><br><span class="line"><span class="keyword">if</span> (xsb[1].length &lt; 2) &#123;</span><br><span class="line">value = value.toString() + <span class="string">"0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js实现保留两位小数&quot;&gt;&lt;a href=&quot;#js实现保留两位小数&quot; class=&quot;headerlink&quot; title=&quot;js实现保留两位小数&quot;&gt;&lt;/a&gt;js实现保留两位小数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="http://yoursite.com/2019/01/23/index/"/>
    <id>http://yoursite.com/2019/01/23/index/</id>
    <published>2019-01-22T16:00:00.000Z</published>
    <updated>2019-01-31T03:55:32.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-GitHub-Git-Hexo"><a href="#Node-GitHub-Git-Hexo" class="headerlink" title="Node + GitHub + Git + Hexo"></a>Node + GitHub + Git + Hexo</h3><h5 id="Node-安装"><a href="#Node-安装" class="headerlink" title="Node 安装"></a>Node 安装</h5><blockquote><p>下载 + 安装 Node<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure></p></blockquote><p><code>&gt; 返回node版本为安装成功</code><br><a id="more"></a></p><h5 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git  安装"></a>Git  安装</h5><p>下载 + Git<br>可右键鼠标来检查是否安装了Git</p><h4 id="GitHub-注册"><a href="#GitHub-注册" class="headerlink" title="GitHub 注册"></a>GitHub 注册</h4><ul><li>注册账号</li><li>创建仓库<ul><li>点击右上角的new  repository</li><li>Repository name为个人GitHub名+.github.io</li></ul></li><li>开启GitHub pages <ul><li>settings + choose a theme    </li></ul></li></ul><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p>Hexo 目录下右键选择Git Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ npm init </span><br><span class="line">$ npm install</span><br><span class="line">$ npm g </span><br><span class="line">$ npm s <span class="comment"># 启动本地服务器</span></span><br></pre></td></tr></table></figure></p><p>根目录的_config.yml文件, Hexo deploy 部署到GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Susie168/Susie168.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><p>Git Bash</p><ul><li><p>SSH keys 设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">mkdir key_backup</span><br><span class="line">cp id_rsa* key_backup</span><br><span class="line">rm id_rsa</span><br><span class="line">#以上三步为备份和移除原来的ssh key 设置</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot; #新的key文件</span><br></pre></td></tr></table></figure></li><li><p>SSH Key 添加到GitHub</p><ul><li>首页 右上角setting</li><li>SSH and GPG keys选项下添加你的key(C:\Users\用户名.ssh\id_rsa.pub文件以文本打开全部复制即可)</li></ul></li></ul><h4 id="根目录-config-yml-修改个人配置即可"><a href="#根目录-config-yml-修改个人配置即可" class="headerlink" title="根目录_config.yml 修改个人配置即可"></a>根目录_config.yml 修改个人配置即可</h4><h3 id="遇坑"><a href="#遇坑" class="headerlink" title="遇坑"></a>遇坑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo -d  #提交的是public文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;title&quot;  #source/_post创建了title.md文件，Markdom语法写好文档</span><br><span class="line">$ hexo g  &amp;&amp; hexo d  # 提交更改的.md 文件</span><br></pre></td></tr></table></figure><p><code>其实搭建Hexo博客网上都很多，我除了自己记录一下学习过程，也是为了营造美好开始的假象[捂脸]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Node-GitHub-Git-Hexo&quot;&gt;&lt;a href=&quot;#Node-GitHub-Git-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Node + GitHub + Git + Hexo&quot;&gt;&lt;/a&gt;Node + GitHub + Git + Hexo&lt;/h3&gt;&lt;h5 id=&quot;Node-安装&quot;&gt;&lt;a href=&quot;#Node-安装&quot; class=&quot;headerlink&quot; title=&quot;Node 安装&quot;&gt;&lt;/a&gt;Node 安装&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;下载 + 安装 Node&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;gt; 返回node版本为安装成功&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="gitHub" scheme="http://yoursite.com/tags/gitHub/"/>
    
  </entry>
  
</feed>
